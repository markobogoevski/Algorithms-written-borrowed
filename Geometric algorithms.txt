// Various geometric functions
 
class Point{
    int x,y;
    Point(int x,int y){
        this.x=x;
        this.y=y;
    }
}
class Line{
    Point point1,point2;
    Line(Point point1,Point point2){
        this.point1=point1;
        this.point2=point2;
    }
}
public class Geometry {
    public static int direction(Line someLine,Point somePoint{
        //returns -1 if left of line, 1 if right, 0 of on line
        int D = (someLine.point2.x-someLine.point1.x)*(somePoint.y-someLine.point1.y)
                -(someLine.point2.y-someLine.point1.y)*(somePoint.x-someLine.point1.x);
        if (D>0)
            return -1;
        else if (D<0)
            return 1;
        else
            return 0;
    }
    public static double scalar(Line line1,Line line2){
        //line1 point1 = line2 point2
        int xOffset = -line1.point1.x;
        int yOffset = -line1.point1.y;
 
        return (line1.point2.x+xOffset)*(line2.point2.x+xOffset)
                +(line1.point2.y+yOffset)*(line2.point2.y+yOffset);
    }
 
    public static double cardinality(Line line){
        return Math.sqrt(Math.pow(line.point1.x-line.point2.x,2)+Math.pow(line.point1.y-line.point2.y,2));
    }
    public static double angle(Line line1,Line line2){
        //returns angle between vectors line1 and line2
        //lines are vectors which have common point!
 
        return Math.acos(scalar(line1,line2)/(cardinality(line1)*cardinality(line2)));
    }
 
    public static Point lineIntersection(Point A, Point B, Point C, Point D)
    {
        // Line AB represented as a1x + b1y = c1
        double a1 = B.y - A.y;
        double b1 = A.x - B.x;
        double c1 = a1*(A.x) + b1*(A.y);
       
        // Line CD represented as a2x + b2y = c2
        double a2 = D.y - C.y;
        double b2 = C.x - D.x;
        double c2 = a2*(C.x)+ b2*(C.y);
       
        double determinant = a1*b2 - a2*b1;
       
        if (determinant == 0)
        {
            // The lines are parallel. This is simplified
            // by returning a pair of FLT_MAX
            return new Point(Double.MAX_VALUE, Double.MAX_VALUE);
        }
        else
        {
            double x = (b2*c1 - b1*c2)/determinant;
            double y = (a1*c2 - a2*c1)/determinant;
            if(Math.min(A.X,B.X)<=x<=Math.max(A.X,B.X) && Math.min(A.Y,B.Y)<=y<=Math.max(A.Y,B.Y)
            && Math.min(C.X,D.X)<=x<=Math.max(C.X,D.X) && Math.min(C.Y,D.Y)<=y<=Math.max(C.Y,D.Y)) //ako lezhi presekot na dvete otsecki
            return new Point(x, y);
            else
            return new Point(Double.MAX_VALUE, Double.MAX_VALUE);
        }
    }
 
//CONVEX HULL GRAHAM
 
import java.util.*;
import java.awt.geom.Point2D;
 
public class ConvexHullGrahamScan {
 
  // Construct a convex hull and return it as a stack of points
  static Stack <Point2D> createConvexHull(Point2D[] pts) {
    int k1, k2, N = pts.length;
    Stack<Point2D> hull = new Stack <Point2D>();
    Arrays.sort(pts, new PointOrder());
    Arrays.sort(pts, 1, N, new PolarOrder(pts[0]));
    hull.push(pts[0]);
    for (k1 = 1; k1 < N; k1++)
      if (!pts[0].equals(pts[k1])) break;
    if (k1 == N) return null;
    for (k2 = k1 + 1; k2 < N; k2++)
      if (collinear(pts[0], pts[k1], pts[k2]) != 0) break;
    hull.push(pts[k2 - 1]);
    for (int i = k2; i < N; i++) {
      Point2D top = hull.pop();
      while (collinear(hull.peek(), top, pts[i]) <= 0) top = hull.pop();
      hull.push(top);
      hull.push(pts[i]);
    }
    return hull;
  }
 
  // Compare other points relative to polar angle (between 0 and 2*PI) they make with this point
  static class PolarOrder implements Comparator <Point2D> {
    Point2D pt;
    public PolarOrder(Point2D pt) {
      this.pt = pt;
    }
    @Override public int compare(Point2D q1, Point2D q2) {
      double dx1 = q1.getX() - pt.getX(), dy1 = q1.getY() - pt.getY();
      double dx2 = q2.getX() - pt.getX(), dy2 = q2.getY() - pt.getY();
      if (dy1 >= 0 && dy2 < 0) return -1;
      else if (dy2 >= 0 && dy1 < 0) return +1;
      else if (dy1 == 0 && dy2 == 0) {
        if (dx1 >= 0 && dx2 < 0) return -1;
        else if (dx2 >= 0 && dx1 < 0) return +1;
        else return 0;
      } else return -collinear(pt, q1, q2);
    }
  }
 
  // Put lower Y co-ordinates first, with a lower X value in the case of ties
  static class PointOrder implements Comparator<Point2D> {
    @Override public int compare(Point2D q1, Point2D q2) {
      if (q1.getY() < q2.getY()) return -1;
      if (q1.getY() == q2.getY()) {
        if (q1.getX() < q2.getX()) return -1;
        else if (q1.getX() > q2.getX()) return 1;
        else return 0;
      }
      return 1;
    }
  }
 
  // Check to see whether the points are ordered clockwise or counter-clockwise (0 indicates that they are collinear)
  static int collinear(Point2D a, Point2D b, Point2D c) {
    double area = (b.getX() - a.getX()) * (c.getY() - a.getY()) - (b.getY() - a.getY()) * (c.getX() - a.getX());
    return (int) Math.signum(area);
  }
 
  public static void main(String[] args) {
   
    Point2D[] pts = new Point2D[13];
 
    pts[0] = new Point2D.Double(0,5);
    pts[1] = new Point2D.Double(-1,1);
    pts[2] = new Point2D.Double(0,1);
    pts[3] = new Point2D.Double(1,1);
    pts[4] = new Point2D.Double(-5,0);
    pts[5] = new Point2D.Double(-1,0);
    pts[6] = new Point2D.Double(0,0);
    pts[7] = new Point2D.Double(1,0);
    pts[8] = new Point2D.Double(5,0);
    pts[9] = new Point2D.Double(-1,-1);
    pts[10] = new Point2D.Double(0,-1);
    pts[11] = new Point2D.Double(1,-1);
    pts[12] = new Point2D.Double(0,-5);
 
    Stack <Point2D> hull = createConvexHull(pts);
 
    // Print the points in the hull
    while(!hull.isEmpty()) System.out.println(hull.pop());
 
  }
 
}
 
//line sweep algorithm
XXXXXXXXXXXXXXXXXXX
 
//dali e tocka vnatre ili nadvor od poligon
 
// A C++ program to check if a given point lies inside a given polygon
// Refer https://www.geeksforgeeks.org/check-if-two-given-line-segments-intersect/
// for explanation of functions onSegment(), orientation() and doIntersect()
#include <iostream>
using namespace std;
 
// Define Infinite (Using INT_MAX caused overflow problems)
#define INF 10000
 
struct Point
{
    int x;
    int y;
};
 
// Given three colinear points p, q, r, the function checks if
// point q lies on line segment 'pr'
bool onSegment(Point p, Point q, Point r)
{
    if (q.x <= max(p.x, r.x) && q.x >= min(p.x, r.x) &&
            q.y <= max(p.y, r.y) && q.y >= min(p.y, r.y))
        return true;
    return false;
}
 
// To find orientation of ordered triplet (p, q, r).
// The function returns following values
// 0 --> p, q and r are colinear
// 1 --> Clockwise
// 2 --> Counterclockwise
int orientation(Point p, Point q, Point r)
{
    int val = (q.y - p.y) * (r.x - q.x) -
              (q.x - p.x) * (r.y - q.y);
 
    if (val == 0) return 0;  // colinear
    return (val > 0)? 1: 2; // clock or counterclock wise
}
 
// The function that returns true if line segment 'p1q1'
// and 'p2q2' intersect.
bool doIntersect(Point p1, Point q1, Point p2, Point q2)
{
    // Find the four orientations needed for general and
    // special cases
    int o1 = orientation(p1, q1, p2);
    int o2 = orientation(p1, q1, q2);
    int o3 = orientation(p2, q2, p1);
    int o4 = orientation(p2, q2, q1);
 
    // General case
    if (o1 != o2 && o3 != o4)
        return true;
 
    // Special Cases
    // p1, q1 and p2 are colinear and p2 lies on segment p1q1
    if (o1 == 0 && onSegment(p1, p2, q1)) return true;
 
    // p1, q1 and p2 are colinear and q2 lies on segment p1q1
    if (o2 == 0 && onSegment(p1, q2, q1)) return true;
 
    // p2, q2 and p1 are colinear and p1 lies on segment p2q2
    if (o3 == 0 && onSegment(p2, p1, q2)) return true;
 
     // p2, q2 and q1 are colinear and q1 lies on segment p2q2
    if (o4 == 0 && onSegment(p2, q1, q2)) return true;
 
    return false; // Doesn't fall in any of the above cases
}
 
// Returns true if the point p lies inside the polygon[] with n vertices
bool isInside(Point polygon[], int n, Point p)
{
    // There must be at least 3 vertices in polygon[]
    if (n < 3)  return false;
 
    // Create a point for line segment from p to infinite
    Point extreme = {INF, p.y};
 
    // Count intersections of the above line with sides of polygon
    int count = 0, i = 0;
    do
    {
        int next = (i+1)%n;
 
        // Check if the line segment from 'p' to 'extreme' intersects
        // with the line segment from 'polygon[i]' to 'polygon[next]'
        if (doIntersect(polygon[i], polygon[next], p, extreme))
        {
            // If the point 'p' is colinear with line segment 'i-next',
            // then check if it lies on segment. If it lies, return true,
            // otherwise false
            if (orientation(polygon[i], p, polygon[next]) == 0)
               return onSegment(polygon[i], p, polygon[next]);
 
            count++;
        }
        i = next;
    } while (i != 0);
 
    // Return true if count is odd, false otherwise
    return count&1;  // Same as (count%2 == 1)
}
 
// Driver program to test above functions
int main()
{
    Point polygon1[] = {{0, 0}, {10, 0}, {10, 10}, {0, 10}};
    int n = sizeof(polygon1)/sizeof(polygon1[0]);
    Point p = {20, 20};
    isInside(polygon1, n, p)? cout << "Yes \n": cout << "No \n";
 
    p = {5, 5};
    isInside(polygon1, n, p)? cout << "Yes \n": cout << "No \n";
 
    Point polygon2[] = {{0, 0}, {5, 5}, {5, 0}};
    p = {3, 3};
    n = sizeof(polygon2)/sizeof(polygon2[0]);
    isInside(polygon2, n, p)? cout << "Yes \n": cout << "No \n";
 
    p = {5, 1};
    isInside(polygon2, n, p)? cout << "Yes \n": cout << "No \n";
 
    p = {8, 1};
    isInside(polygon2, n, p)? cout << "Yes \n": cout << "No \n";
 
    Point polygon3[] =  {{0, 0}, {10, 0}, {10, 10}, {0, 10}};
    p = {-1,10};
    n = sizeof(polygon3)/sizeof(polygon3[0]);
    isInside(polygon3, n, p)? cout << "Yes \n": cout << "No \n";
 
    return 0;
}

//CONVEX HULL GRAHAM
 
import java.awt.Point;
import java.util.*;
 
/**
 *
 */
public final class GrahamScan {
 
    /**
     * An enum denoting a directional-turn between 3 points (vectors).
     */
    protected static enum Turn { CLOCKWISE, COUNTER_CLOCKWISE, COLLINEAR }
 
    /**
     * Returns true iff all points in <code>points</code> are collinear.
     *
     * @param points the list of points.
     * @return       true iff all points in <code>points</code> are collinear.
     */
    protected static boolean areAllCollinear(List<Point> points) {
 
        if(points.size() < 2) {
            return true;
        }
 
        final Point a = points.get(0);
        final Point b = points.get(1);
 
        for(int i = 2; i < points.size(); i++) {
 
            Point c = points.get(i);
 
            if(getTurn(a, b, c) != Turn.COLLINEAR) {
                return false;
            }
        }
 
        return true;
    }
 
    /**
     * Returns the convex hull of the points created from <code>xs</code>
     * and <code>ys</code>. Note that the first and last point in the returned
     * <code>List&lt;java.awt.Point&gt;</code> are the same point.
     *
     * @param xs the x coordinates.
     * @param ys the y coordinates.
     * @return   the convex hull of the points created from <code>xs</code>
     *           and <code>ys</code>.
     * @throws IllegalArgumentException if <code>xs</code> and <code>ys</code>
     *                                  don't have the same size, if all points
     *                                  are collinear or if there are less than
     *                                  3 unique points present.
     */
    public static List<Point> getConvexHull(int[] xs, int[] ys) throws IllegalArgumentException {
 
        if(xs.length != ys.length) {
            throw new IllegalArgumentException("xs and ys don't have the same size");
        }
 
        List<Point> points = new ArrayList<Point>();
 
        for(int i = 0; i < xs.length; i++) {
            points.add(new Point(xs[i], ys[i]));
        }
 
        return getConvexHull(points);
    }
 
    /**
     * Returns the convex hull of the points created from the list
     * <code>points</code>. Note that the first and last point in the
     * returned <code>List&lt;java.awt.Point&gt;</code> are the same
     * point.
     *
     * @param points the list of points.
     * @return       the convex hull of the points created from the list
     *               <code>points</code>.
     * @throws IllegalArgumentException if all points are collinear or if there
     *                                  are less than 3 unique points present.
     */
    public static List<Point> getConvexHull(List<Point> points) throws IllegalArgumentException {
 
        List<Point> sorted = new ArrayList<Point>(getSortedPointSet(points));
 
        if(sorted.size() < 3) {
            throw new IllegalArgumentException("can only create a convex hull of 3 or more unique points");
        }
 
        if(areAllCollinear(sorted)) {
            throw new IllegalArgumentException("cannot create a convex hull from collinear points");
        }
 
        Stack<Point> stack = new Stack<Point>();
        stack.push(sorted.get(0));
        stack.push(sorted.get(1));
 
        for (int i = 2; i < sorted.size(); i++) {
 
            Point head = sorted.get(i);
            Point middle = stack.pop();
            Point tail = stack.peek();
 
            Turn turn = getTurn(tail, middle, head);
 
            switch(turn) {
                case COUNTER_CLOCKWISE:
                    stack.push(middle);
                    stack.push(head);
                    break;
                case CLOCKWISE:
                    i--;
                    break;
                case COLLINEAR:
                    stack.push(head);
                    break;
            }
        }
 
        // close the hull
        stack.push(sorted.get(0));
 
        return new ArrayList<Point>(stack);
    }
 
    /**
     * Returns the points with the lowest y coordinate. In case more than 1 such
     * point exists, the one with the lowest x coordinate is returned.
     *
     * @param points the list of points to return the lowest point from.
     * @return       the points with the lowest y coordinate. In case more than
     *               1 such point exists, the one with the lowest x coordinate
     *               is returned.
     */
    protected static Point getLowestPoint(List<Point> points) {
 
        Point lowest = points.get(0);
 
        for(int i = 1; i < points.size(); i++) {
 
            Point temp = points.get(i);
 
            if(temp.y < lowest.y || (temp.y == lowest.y && temp.x < lowest.x)) {
                lowest = temp;
            }
        }
 
        return lowest;
    }
 
    /**
     * Returns a sorted set of points from the list <code>points</code>. The
     * set of points are sorted in increasing order of the angle they and the
     * lowest point <tt>P</tt> make with the x-axis. If tow (or more) points
     * form the same angle towards <tt>P</tt>, the one closest to <tt>P</tt>
     * comes first.
     *
     * @param points the list of points to sort.
     * @return       a sorted set of points from the list <code>points</code>.
     * @see GrahamScan#getLowestPoint(java.util.List)
     */
    protected static Set<Point> getSortedPointSet(List<Point> points) {
 
        final Point lowest = getLowestPoint(points);
 
        TreeSet<Point> set = new TreeSet<Point>(new Comparator<Point>() {
            @Override
            public int compare(Point a, Point b) {
 
                if(a == b || a.equals(b)) {
                    return 0;
                }
 
                // use longs to guard against int-underflow
                double thetaA = Math.atan2((long)a.y - lowest.y, (long)a.x - lowest.x);
                double thetaB = Math.atan2((long)b.y - lowest.y, (long)b.x - lowest.x);
 
                if(thetaA < thetaB) {
                    return -1;
                }
                else if(thetaA > thetaB) {
                    return 1;
                }
                else {
                    // collinear with the 'lowest' point, let the point closest to it come first
 
                    // use longs to guard against int-over/underflow
                    double distanceA = Math.sqrt((((long)lowest.x - a.x) * ((long)lowest.x - a.x)) +
                                                (((long)lowest.y - a.y) * ((long)lowest.y - a.y)));
                    double distanceB = Math.sqrt((((long)lowest.x - b.x) * ((long)lowest.x - b.x)) +
                                                (((long)lowest.y - b.y) * ((long)lowest.y - b.y)));
 
                    if(distanceA < distanceB) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        });
 
        set.addAll(points);
 
        return set;
    }
 
    /**
     * Returns the GrahamScan#Turn formed by traversing through the
     * ordered points <code>a</code>, <code>b</code> and <code>c</code>.
     * More specifically, the cross product <tt>C</tt> between the
     * 3 points (vectors) is calculated:
     *
     * <tt>(b.x-a.x * c.y-a.y) - (b.y-a.y * c.x-a.x)</tt>
     *
     * and if <tt>C</tt> is less than 0, the turn is CLOCKWISE, if
     * <tt>C</tt> is more than 0, the turn is COUNTER_CLOCKWISE, else
     * the three points are COLLINEAR.
     *
     * @param a the starting point.
     * @param b the second point.
     * @param c the end point.
     * @return the GrahamScan#Turn formed by traversing through the
     *         ordered points <code>a</code>, <code>b</code> and
     *         <code>c</code>.
     */
    protected static Turn getTurn(Point a, Point b, Point c) {
 
        // use longs to guard against int-over/underflow
        long crossProduct = (((long)b.x - a.x) * ((long)c.y - a.y)) -
                            (((long)b.y - a.y) * ((long)c.x - a.x));
 
        if(crossProduct > 0) {
            return Turn.COUNTER_CLOCKWISE;
        }
        else if(crossProduct < 0) {
            return Turn.CLOCKWISE;
        }
        else {
            return Turn.COLLINEAR;
        }
    }
}